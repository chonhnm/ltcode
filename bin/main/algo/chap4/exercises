*FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)
left-sum = NULL
sum = 0
for i = mid downto low
    sum = sum + A[i]
    if (sum > left-sum || left-sum == NULL)
        left-sum = sum
        max-left = i
right-sum = NULL
sum = 0
for i = mid + 1 to hight
    sum = sum + A[i]
    if(sum > right-sum || right-sum == NULL)
        right-sum = sum
        max-right = i
return (max-left, max-right, left-sum + right-sum)

*FIND-MAX-SUBARRAY(A, low, high)
if (low == high)
    return (low, high, A[low])
else 
    mid = (low + high) / 2
    (left-low, left-high, left-sum) = FIND-MAX-SUBARRAY(A, low, high)
    (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)
    (right-low, right-high, right-sum) = FIND-MAX-SUBARRAY(A, mid+1, high)
    if(left-sum > cross-sum && left-sum > right-sum) 
        return (left-low, left-high, left-sum)
    else if(right-sum > left-sum && right-sum > cross-sum)
        return (right-low, right-high, right-sum)
    else
        return (cross-low, cross-high, cross-sum)


exe4.1
mininum(A)

exe4.2
FIND-MAX-SUBARRAY(A, low, high)
max-sum = NULL
for i = low to high
    sum = 0
    for j = i to high
        sum = sum + A[i]
        if (sum > max-sum || max-sum == NULL)
            max-sum = sum
            max-left = i
            max-right = j
return (max-left, max-right, max-sum)

